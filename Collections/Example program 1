CREATE TABLE products (
    product_id NUMBER PRIMARY KEY,
    product_name VARCHAR2(50),
    product_price NUMBER,
    product_category VARCHAR2(30)
);

-- Sample Data
INSERT INTO products VALUES (1, 'Laptop', 55000, 'Electronics');
INSERT INTO products VALUES (2, 'Tablet', 30000, 'Electronics');
INSERT INTO products VALUES (3, 'Smartphone', 20000, 'Electronics');
INSERT INTO products VALUES (4, 'Monitor', 12000, 'Electronics');
INSERT INTO products VALUES (5, 'Printer', 8000, 'Electronics');

COMMIT;




DECLARE
    -- Cursor to fetch product details
    CURSOR product_cur IS
        SELECT product_id, product_name, product_price, product_category FROM products;

    -- Collection Types
    TYPE ProductNameArray IS VARRAY(5) OF VARCHAR2(50);
    TYPE ProductPriceTable IS TABLE OF NUMBER;
    TYPE ProductDescTable IS TABLE OF VARCHAR2(100) INDEX BY PLS_INTEGER;

    -- Collection Variables
    product_names ProductNameArray := ProductNameArray();
    product_prices ProductPriceTable := ProductPriceTable();
    product_descriptions ProductDescTable;

    -- Variables
    v_product_id   products.product_id%TYPE;
    v_product_name products.product_name%TYPE;
    v_product_price products.product_price%TYPE;
    v_product_category products.product_category%TYPE;
    
    discount NUMBER;
    idx PLS_INTEGER := 0;

BEGIN
    -- Open Cursor and Fetch Data into Collections
    OPEN product_cur;
    LOOP
        FETCH product_cur INTO v_product_id, v_product_name, v_product_price, v_product_category;
        EXIT WHEN product_cur%NOTFOUND;

        -- Add fetched data to collections
        idx := idx + 1;

        -- Handling VARRAY Limit
        IF idx <= 5 THEN
            product_names.EXTEND;
            product_names(idx) := v_product_name;
        ELSE
            RAISE_APPLICATION_ERROR(-20002, 'VARRAY limit exceeded.');
        END IF;

        product_prices.EXTEND;
        product_prices(idx) := v_product_price;

        product_descriptions(v_product_id) := v_product_name || ' (' || v_product_category || ')';
    END LOOP;
    CLOSE product_cur;

    -- Display Product Names from VARRAY
    DBMS_OUTPUT.PUT_LINE('--- Product Names (VARRAY) ---');
    FOR i IN 1 .. product_names.COUNT LOOP
        DBMS_OUTPUT.PUT_LINE('Product ' || i || ': ' || product_names(i));
    END LOOP;

    -- Display Prices with Discounts (using Conditional IF)
    DBMS_OUTPUT.PUT_LINE('--- Product Prices with Discounts (Nested Table) ---');
    FOR i IN 1 .. product_prices.COUNT LOOP
        IF product_prices(i) > 40000 THEN
            discount := 10;
        ELSIF product_prices(i) BETWEEN 15000 AND 40000 THEN
            discount := 5;
        ELSE
            discount := 0;
        END IF;

        DBMS_OUTPUT.PUT_LINE('Product ' || i || ' Price: â‚¹' || product_prices(i) || ' | Discount: ' || discount || '%');
    END LOOP;

    -- Display Descriptions using Associative Array
    DBMS_OUTPUT.PUT_LINE('--- Product Descriptions (Associative Array) ---');
    FOR i IN 1 .. idx LOOP
        DBMS_OUTPUT.PUT_LINE('Product ID ' || i || ': ' || product_descriptions(i));
    END LOOP;

    -- Example: Raise custom error if total products fetched < 5
    IF idx < 5 THEN
        RAISE_APPLICATION_ERROR(-20001, 'Error: Less than 5 products retrieved. Total: ' || idx);
    END IF;

EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);
END;
/

